package com.lgy.lingua.dto;

import lombok.Getter;

@Getter
public class BoardPage {
	// 화면 하단에 페이지 번호가 10개씩 보이게 설정 예정 (1~10, 11~20)
	
	private int startPage;			// 화면에 출력되는 페이지 번호의 시작페이지: 1, 11, 21, ... 91 ... (즉, 내가 현재 머무르는 페이지 번호가 1부터 10사이라면 시작페이지는 항상 1이 된다)
	private int endPage;			// 화면에 출력되는 페이지 번호의 끝페이지: 10, 20, 30, ... 100 ... (즉, 내가 현재 머무르는 페이지 번호가 1부터 10사이라면 끝페이지는 항상 10이 된다)
	private boolean prev, next;		// [이전]과 [다음]
	
	private int total;				// 전체 게시글 개수
	private BoardCriteria cri;		// 한 페이지에 출력되는 게시글 개수

	
	// 전체 게시글 개수(total)와 cri 객체(pageNum, amount)를 매개변수로 받고 시작페이지, 끝페이지, [이전] 및 [다음] 을 직접 설정하는 생성자
	public BoardPage(int total, BoardCriteria cri) {
		this.total = total;
		this.cri = cri;
		
		// cri 객체에 저장된 현재 머무르는 페이지 번호를 가져옴								ex> [3]						[11]					[102]
		// 현재 머무르는 페이지 번호를 10.0 으로 나누어서 소수점 이하를 포함한 결과값을 얻음		ex> 3 / 10.0 = 0.3			11 / 10.0 = 1.1			102 / 10.0 = 10.2
		// 결과값을 올림 처리														ex> ceil(0.3) = 1.0			ceil(1.1) = 2.0			ceil(10.2) = 11.0
		// 정수로 변환																ex> int(1.0) = 1			int(2.0) = 2			int(11.0) = 11
		// 화면 하단에 보여주고자 하는 페이지 번호의 개수(10)만큼 곱하기						ex> 1 * 10 = 10				2 * 10 = 20				11 * 10 = 110
		this.endPage = (int)(Math.ceil(cri.getPageNum() / 10.0)) * 10;
		
		// 화면 하단에 보여지는 끝페이지 번호에서 -9 를 하여 시작페이지 번호 구하기				ex> 10 - 9 = 1				20 - 9 = 11				100 - 9 = 91
		this.startPage = this.endPage - 9;
		
		
		
		/* 1-10, 11-20, ... 71-80 ... 이런 식으로 페이지 번호를 보여줄 텐데 전체 게시글 수가 800개가 아니라면 80페이지까지 꽉 채워서 보여줄 필요 없음
		 * 예를 들어 전체 개시글 수가 752개라면 전체 형성되어야 할 페이지 개수는 76 페이지까지임 (77, 78, 79, 80 페이지 보여줄 필요 없음)
		 * 1-10, 11-20, ... 71-76 페이지 번호가 화면의 하단에 이렇게 표시되어야 함
		 * 이 마지막 단의 끝페이지 번호를 실제 개시글 개수에 맞게 조정해주기 위해 아래의 처리를 거쳐야 함
		 * */
		
		// 전체 게시글 개수에 1.0을 곱해 소수로 변환										ex> 77ea * 1.0 = 77.0		ex> 300ea * 1.0 = 300.0		ex> 1052ea * 1.0 = 1052.0
		// cri 객체에 저장된 한 페이지당 출력되는 게시글의 개수를 가져옴						ex> 10						ex> 10						ex> 10
		// 전체 개수에서 페이지당 개수를 나누면 총 형성되어야 하는 페이지 개수가 소수로 나옴		ex> 77.0 / 10 = 7.7			ex> 300.0 / 10 = 30.0		ex> 1052.0 / 10 = 105.2
		// 결과값을 올림 처리														ex> ceil(7.7) = 8.0			ex> ceil(30.0) = 30.0		ex> ceil(105.2) = 106.0
		// 정수로 변환 (전체 페이지 번호 중 마지막 페이지 번호)								ex> int(8.0) = 8			ex> int(30.0) = 30			ex> int(106.0) = 106
		int realEnd = (int)(Math.ceil( (total * 1.0) / cri.getAmount() ) );
		
		// 마지막 페이지 번호가 현재 페이지에서 보여지는 끝페이지보다 작거나 같다면 치환			ex> [3] 77ea				ex> [11] 300ea				ex> [102] 1052ea
		// 전체 페이지 번호 중 마지막 페이지 번호											ex> realEnd = 8				ex> realEnd = 30			ex> realEnd = 106 
		// 현재 머무르는 페이지에서 보여지는 끝페이지 번호									ex> endPage = 10			ex> endPage = 20			ex> endPage = 110
		// 마지막 페이지 번호가 현재 보여지는 끝페이지 번호보다 작거나 같으면 치환		 		ex> 8 <= 10	(true)			ex> 30 <= 20 (false)		ex> 106 <= 110 (true)
		// 즉 진짜 끝페이지는														ex> 10이 아니라 [8]			ex> 그대로 [20]				ex> 110이 아니라 [106]
		if(realEnd <= this.endPage) {
			this.endPage = realEnd;
		}
		
		// 시작페이지가 1보다 크다는 것은 11, 21, 31, ... 이런 페이지들을 의미하는 것으로 이 경우 [이전] 버튼 보여주기
		// 시작페이지가 1인 경우는 false 이므로 [이전] 버튼 없어도 됨
		this.prev = this.startPage > 1;
		
		// 끝페이지 번호가 전체 페이지 번호 중 마지막 페이지 번호보다 작으면 [다음] 버튼 보여주기 
		this.next = this.endPage < realEnd;
	}
	
	
}









